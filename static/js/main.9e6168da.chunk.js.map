{"version":3,"sources":["components/Header.js","routes/Home.js","routes/About.js","routes/Posts.js","routes/Post.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","placeholder","exact","to","activeClassName","pathname","state","posts","this","props","Component","Home","About","Posts","testlist","location","map","id","text","title","key","Post","App","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kUA0BeA,G,6KApBP,OACI,yBAAKC,UAAY,UACb,yBAAKA,UAAY,eAAjB,gBAGA,6BACI,2BAAOA,UAAW,QAClBC,YAAc,cAElB,yBAAKD,UAAY,QACb,kBAAC,IAAD,CAASE,OAAK,EAACC,GAAG,IAAIH,UAAY,YAAYI,gBAAkB,UAAhE,QACA,kBAAC,IAAD,CAASD,GAAI,CAACE,SAAU,SAAUC,MAAO,CAACC,MAAOC,KAAKC,MAAMF,QAASP,UAAY,YAAYI,gBAAkB,UAA/G,SAGA,kBAAC,IAAD,CAASD,GAAG,SAASH,UAAY,YAAYI,gBAAkB,UAA/D,e,GAhBCM,cCMNC,EARF,WACZ,OACI,sCCMUC,EARD,WACV,OACI,uCC6BOC,G,6KA5BF,IAAD,OACEC,EAAWN,KAAKC,MAAMM,SAAST,MAAMC,MAAMS,KAC7C,gBAAEC,EAAF,EAAEA,GAAGC,EAAL,EAAKA,KAAKC,EAAV,EAAUA,MAAV,OACI,kBAAC,IAAD,CACAC,IAAOH,EACPd,GAAM,CAACE,SAAS,UAAD,OAAY,EAAKI,MAAMM,SAAST,MAAMC,MAAMU,GAAIE,OAC/Db,MAAO,CAACa,MAAOA,EACPD,KAAMA,KACd,EAAKT,MAAMM,SAAST,MAAMC,MAAMU,GAAIE,WAG5C,OACI,yBAAKnB,UAAY,SACb,yBAAKA,UAAY,UAOZc,Q,GArBDJ,cCeLW,E,uKAdP,OACI,6BACI,4BACKb,KAAKC,MAAMM,SAAST,MAAMa,OAE/B,6BACKX,KAAKC,MAAMM,SAAST,MAAMY,W,GAR5BR,aCsCJY,G,kNA3BbL,GAAK,E,EACLX,MAAQ,CACNC,MAAQ,CACN,CAACU,GAAG,EAAGC,KAAM,aAAcC,MAAO,eAClC,CAACF,GAAG,EAAGC,KAAM,aAAcC,MAAO,eAClC,CAACF,GAAG,EAAGC,KAAM,aAAcC,MAAO,eAClC,CAACF,GAAG,EAAGC,KAAM,aAAcC,MAAO,iB,uDAIpC,OACE,kBAAC,IAAD,KACE,yBAAKnB,UAAY,aACf,kBAAC,EAAD,CAAQO,MAASC,KAAKF,MAAMC,QAE5B,kBAAC,IAAD,CAAOL,OAAK,EAACqB,KAAO,IAAIC,UAAab,IACrC,kBAAC,IAAD,CAAOT,OAAK,EAACqB,KAAO,SAASC,UAAaX,IAE1C,kBAAC,IAAD,CAAOU,KAAM,SAASC,UAAaZ,IACnC,kBAAC,IAAD,CAAOW,KAAO,gBAAgBC,UAAaH,U,GArBnCX,cCAEe,QACW,cAA7BC,OAAOX,SAASY,UAEe,UAA7BD,OAAOX,SAASY,UAEhBD,OAAOX,SAASY,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9e6168da.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Header.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nclass Header extends Component {\r\n    render(){\r\n        return(\r\n            <div className = \"header\">\r\n                <div className = \"header-text\">\r\n                    hckim's page\r\n                </div>\r\n                <div>\r\n                    <input className =\"input\"\r\n                    placeholder = \"search..\"/>\r\n                </div>\r\n                <div className = \"menu\">\r\n                    <NavLink exact to=\"/\" className = \"menu-item\" activeClassName = \"active\">home</NavLink>\r\n                    <NavLink to={{pathname: \"/posts\", state: {posts: this.props.posts}}} className = \"menu-item\" activeClassName = \"active\">posts</NavLink>\r\n                    \r\n                    \r\n                    <NavLink to=\"/about\" className = \"menu-item\" activeClassName = \"active\">about</NavLink>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Header;\r\n","import React, {Component} from 'react';\r\n\r\nconst Home = () => {\r\n return(\r\n     <div>\r\n         Home\r\n     </div>\r\n )   \r\n}\r\n\r\nexport default Home;\r\n","import React, {Component} from 'react';\r\n\r\nconst About = () => {\r\n    return(\r\n        <div>\r\n            about\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About;\r\n","import React, {Component} from 'react';\r\nimport {Link,Route} from 'react-router-dom';\r\nimport './Posts.css';\r\n\r\nclass Posts extends Component {\r\n    render(){\r\n        const testlist = this.props.location.state.posts.map(\r\n            ({id,text,title}) => (\r\n                <Link \r\n                key = {id}\r\n                to = {{pathname: `/posts/${this.props.location.state.posts[id].title}`,\r\n                state: {title: title,\r\n                        text: text}\r\n            }}>{this.props.location.state.posts[id].title}</Link>\r\n            )\r\n        )\r\n        return(\r\n            <div className = \"posts\">\r\n                <div className = \"titles\">\r\n                    {/* <Link to = \"/posts/post1\" className = \"post\">Post1</Link>\r\n                    <Link to = \"/posts/post2\" className = \"post\">Post2</Link>\r\n                    <Link to = \"/posts/post3\" className = \"post\">Post3</Link>\r\n                    <Link to = {{pathname: `/posts/${this.props.location.state.posts[0].title}`,\r\n                    }}>{this.props.location.state.posts[0].title}</Link> */}\r\n                    \r\n                    {testlist}\r\n                </div>\r\n                {/* <Route path = \"/posts/:title\" component = {Post}/> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Posts;\r\n","import React, {Component} from 'react';\r\n\r\n\r\nclass Post extends Component {\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>\r\n                    {this.props.location.state.title}\r\n                </h1>\r\n                <div>\r\n                    {this.props.location.state.text}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Post;","import React, {Component} from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\nimport Header from './components/Header';\n\nimport Home from './routes/Home';\nimport About from './routes/About';\nimport Posts from './routes/Posts';\nimport Post from './routes/Post';\n\nimport './App.css';\n\nclass App extends Component {\n\n  id = 4;\n  state = {\n    posts : [\n      {id:0, text: \"post0 text\", title: \"post0 title\"},\n      {id:1, text: \"post1 text\", title: \"post1 title\"},\n      {id:2, text: \"post2 text\", title: \"post2 title\"},\n      {id:3, text: \"post3 text\", title: \"post3 title\"}\n    ]\n  }\n  render() {\n    return(\n      <Router >\n        <div className = \"container\">\n          <Header posts = {this.state.posts}/>\n\n          <Route exact path = \"/\" component = {Home}/>\n          <Route exact path = \"/posts\" component = {Posts}/>\n\n          <Route path =\"/about\" component = {About}/>\n          <Route path = \"/posts/:title\" component = {Post}/>\n        </div>\n      </Router>\n    )\n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}